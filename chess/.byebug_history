c
s
finish
n
s
@current_player.color
@board[start_pos].color
finish
n
s
c
finish
s
c
@current_player
@board[start_pos].color
@board[start_pos].class
@board[start_pos].pos
@board[start_pos]
n
s
exit
updating_pos
n
s
@board[[5,6]]
self.valid_moves
self.pos
self.poas
@board
move_list
n
s
c
s
finish
s
exit
finish
s
opponent_locations
n
opponent_color
n
king_location
n
s
color
s
dup_board[[2,4]].color
dup_board[[2,4]].class
dup_board[[2,4]]
dup_board[[1,4]]
dup_board
s
end_pos
piece.pos
s
end_pos
piece.color
piece.class
piece.pos
s
finish
s
list
piece.pos
piece
n
s
n
finish
s
exit
n
s
start_pos
s
dup_board
n
move_pos
finish
s
self.valid_movess
self.valid_moves
n
list
self.valide_move
self.valide_moves
self
n
s
n
s
n
s
c
s
piece_list.map(&:class)
n
finish
s
board
@color
@pos
s
piece.pos
piece.class
piece
s
dup_board
n
s
finish
s
finish
s
c
n
finish
s
self
s
self[start_pos].valid_move_check
self[start_pos].pos
self[start_pos]
c
move_list.uniq.include?(king_location)
move_list
c
exit
c
updating_pos
s
c
self[[1,7]].valid_moves(self)
self[[1,7]].valid_moves(Self)
opponent_locations
opponent_color
c
n
s
c
n
c
n
s
c
s
display move_list
n
move_list
finish
s
c
self[loc].valid_moves(self)
self[loc]
loc
s
c
n
opponent_locations
c
opponent_locations
c
n
finish
s
finish
s
c
self[start_pos].valid_moves(self)
self[start_pos]
c
s
c
self[start_pos].valid_moves(self)
self[start_pos].valid_moves
s
self[start_pos]
s
end_pos
start_pos
c
end_pos
start_pos
c
s
val
q
nn
n
val
n
s
finish
n
s
val
s
val
s
val
n
s
b
s
c
val
c
s
@cursor_pos.cursor_pos
@cursor_post.cursor_pos
val
c
s
c
finish
s
n
finish
s
c
@board[row_idx, col_idx]
s
c
n
c
updating_pos
s
c
s
move_list
s
@board[updating_pos].color
@board[updating_pos]
s
n
s
c
@board[updating_pos].color
@board[updating_pos]
s
updating_pos
s
col
row
s
dir
direction
s
c
load 'lib/display.rb'
puts @board[@cursor_pos.cursor_pos].colorize(:background => :red)
@board[@cursor_pos.cursor_pos].colorize(:background => :red)
@board[@cursor_pos.cursor_pos]
